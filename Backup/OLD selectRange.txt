	public static Iterator selectRangeFromTable(String strTable,
			Hashtable<String, String> htblColNameRange, String strOperator)
			throws DBEngineException, ClassNotFoundException, IOException {
		ArrayList result = new ArrayList();
		ArrayList TakenRecords = new ArrayList();
		String tablepath = "data/tables/" + strTable + "/" + strTable + ".bin";
		// Table T = (Table) deserialize(tablepath);
		Table T = (Table) loadFileDyn(tablepath);
		Iterator coloumnsI = htblColNameRange.keySet().iterator();

		if (strOperator.equals("OR")) {
			while (coloumnsI.hasNext()) {
				String ColumnName = (String) coloumnsI.next();
				// System.out.println(ColumnName); // major
				String ColumnAllValue = htblColNameRange.get(ColumnName);
				String Columnrange = getOperator(ColumnAllValue);
				String ColumnValue;
				if (Columnrange.length() == 1) {
					ColumnValue = ColumnAllValue.substring(1);
				} else {
					ColumnValue = ColumnAllValue.substring(2);
				}

				if (T.getIndexes().contains(ColumnName)) {
					String BTreePath = "data/tables/" + strTable + "/"
							+ "BTree/" + ColumnName + ".bin";
					// BTree B = (BTree) deserialize(BTreePath);
					BTree B = (BTree) loadFileDyn(BTreePath);
					ArrayList tempo = new ArrayList();
					ArrayList tempoe = new ArrayList();
					ArrayList pathes = new ArrayList();
					ArrayList pathesB = new ArrayList();

					if (Columnrange.charAt(0) == '>') {
						pathes = B.getbiggerthan(ColumnValue);
						Iterator pathesI = pathes.iterator();
						ArrayList PagesScanned = new ArrayList();
						while (pathesI.hasNext()) {
							String PagePath = (String) pathesI.next();
							if (!PagesScanned.contains(PagePath)) {
								// Page p = (Page) deserialize((PagePath));
								Page p = (Page) loadFileDyn((PagePath));
								Iterator Itemp = p.getRecordbiggerthan(
										ColumnName, ColumnValue).iterator();
								while (Itemp.hasNext()) {
									Hashtable<String, String> r = (Hashtable<String, String>) Itemp
											.next();
									if (!TakenRecords.contains(p.getPageName()
											+ p.getrecordPlace(r))) {
										result.add(r);
										TakenRecords.add(p.getPageName()
												+ p.getrecordPlace(r));
									}
								}
								PagesScanned.add(PagePath);
							}

						}
					}

					if (Columnrange.charAt(0) == '<') {
						pathes = B.getSmallerthan(ColumnValue);
						Iterator pathesI = pathes.iterator();
						ArrayList PagesScanned = new ArrayList();
						while (pathesI.hasNext()) {
							String PagePath = (String) pathesI.next();
							if (!PagesScanned.contains(PagePath)) {
								// Page p = (Page) deserialize((PagePath));
								Page p = (Page) loadFileDyn((PagePath));
								Iterator Itemp = p.getRecordbiggerthan(
										ColumnName, ColumnValue).iterator();
								while (Itemp.hasNext()) {
									Hashtable<String, String> r = (Hashtable<String, String>) Itemp
											.next();
									if (!TakenRecords.contains(p.getPageName()
											+ p.getrecordPlace(r))) {
										result.add(r);
										TakenRecords.add(p.getPageName()
												+ p.getrecordPlace(r));

									}
								}
								PagesScanned.add(PagePath);

							}

						}
					}

					if (Columnrange.length() != 1
							&& B.search(ColumnValue) != null) {

						String path = (String) B.search(ColumnValue);
						// Page p = (Page) deserialize((path));
						Page p = (Page) loadFileDyn((path));
						Hashtable<String, String> r = (Hashtable<String, String>) p
								.getRecord(ColumnName, ColumnValue);
						if (!TakenRecords.contains(p.getPageName()
								+ p.getrecordPlace(r))) {
							result.add(r);
							TakenRecords.add(p.getPageName()
									+ p.getrecordPlace(r));
						}

					}

				} else {
					Iterator PagesI = T.getAllPages().iterator();
					while (PagesI.hasNext()) {
						ArrayList tempo = new ArrayList();
						ArrayList tempoe = new ArrayList();
						String Pname = (String) PagesI.next();
						String PagePath = "data/tables/" + strTable + "/"
								+ "pages/" + Pname + ".class";
						// Page p = (Page) deserialize(PagePath);
						Page p = (Page) loadFileDyn(PagePath);
						if (Columnrange.length() != 1)
							tempoe = p.getRecords(ColumnName, ColumnValue);

						if (Columnrange.charAt(0) == '>')
							tempo = p.getRecordbiggerthan(ColumnName,
									ColumnValue);

						if (Columnrange.charAt(0) == '<')
							tempo = p
									.getRecordLessthan(ColumnName, ColumnValue);

						Iterator tempoI = tempoe.iterator();
						while (tempoI.hasNext()) {
							Hashtable<String, String> r = (Hashtable<String, String>) tempoI
									.next();

							if (!TakenRecords.contains(p.getPageName()
									+ p.getrecordPlace(r))) {
								result.add(r);
								TakenRecords.add(p.getPageName()
										+ p.getrecordPlace(r));
							}

						}

						tempoI = tempo.iterator();
						while (tempoI.hasNext()) {
							Hashtable<String, String> r = (Hashtable<String, String>) tempoI
									.next();
							if (!TakenRecords.contains(p.getPageName()
									+ p.getrecordPlace(r))) {
								result.add(r);
								TakenRecords.add(p.getPageName()
										+ p.getrecordPlace(r));
							}

						}

						/*
						 * if (r != null) if
						 * (!TakenRecords.contains(p.getPageName() +
						 * p.getrecordPlace(r))) {// check if the // record isnt
						 * // already // selected result.add(r);
						 * TakenRecords.add(r); }
						 */
					}

				}

				for (int i = 0; i < result.size(); i++) {
					System.out.println(result.get(i));
				}
				return result.iterator();
			}
		}

		if (strOperator.equals("AND")) {
			boolean flag = false;
			while (coloumnsI.hasNext()) {
				String ColumnName = (String) coloumnsI.next();
				// System.out.println(ColumnName); // major
				String ColumnAllValue = htblColNameRange.get(ColumnName);
				String Columnrange = getOperator(ColumnAllValue);
				String ColumnValue;
				if (Columnrange.length() == 1) {
					ColumnValue = ColumnAllValue.substring(1);
				} else {
					ColumnValue = ColumnAllValue.substring(2);
				}

				if (flag == false) {
					Hashtable<String, String> htblColNameRangetemp = new Hashtable<String, String>();
					htblColNameRangetemp.put(ColumnName, ColumnAllValue);
					result =  (ArrayList) selectRangeFromTable(strTable,htblColNameRangetemp, "OR");
					flag = true;
				} else { // low flag mesh be false i.e. mesh 2wl iteration
							// 3lshan yeloop 3ala result mesh database 3lshan
							// AND kan nefse 23mlha recursion <3

					ArrayList temp = new ArrayList();
					temp = (ArrayList) result.clone();
					Iterator ResultI = temp.iterator();
					ArrayList tempresult = new ArrayList();
					while (ResultI.hasNext()) {
						Hashtable<String, String> Record = (Hashtable<String, String>) ResultI
								.next();
						if (Columnrange.charAt(1) == '=') {
							if (Record.get(ColumnName).compareTo(ColumnValue) != 0)
								if (Columnrange.charAt(0) == '>') {
									if (Record.get(ColumnName).compareTo(
											ColumnValue) < 0)
										result.remove(Record);
								}
							if (Columnrange.charAt(0) == '<') {
								if (Record.get(ColumnName).compareTo(
										ColumnValue) > 0)
									result.remove(Record);
							}
						} else {
							if (Columnrange.charAt(0) == '>') {
								if (Record.get(ColumnName).compareTo(
										ColumnValue) <= 0)
									result.remove(Record);
							}
							if (Columnrange.charAt(0) == '<') {
								if (Record.get(ColumnName).compareTo(
										ColumnValue) >= 0)
									result.remove(Record);
							}
						}

					}
				}

			}
			for (int i = 0; i < result.size(); i++) {
				System.out.println(result.get(i));
			}

			return result.iterator();
		}

		return null;

	}