	public static Iterator selectValueFromTable(String strTable,
			Hashtable<String, String> htblColNameValue, String strOperator)
			throws DBEngineException, ClassNotFoundException, IOException {
		ArrayList result = new ArrayList();
		ArrayList TakenRecords = new ArrayList();
		String tablepath = "data/tables/" + strTable + "/" + strTable + ".bin";
		// Table T = (Table) deserialize(tablepath);
		Table T = (Table) loadFileDyn(tablepath);
		Iterator coloumnsI = htblColNameValue.keySet().iterator();
		if (strOperator.equals("OR")) {
			while (coloumnsI.hasNext()) {
				String ColumnName = (String) coloumnsI.next();
				System.out.println(ColumnName); // major
				String ColumnValue = htblColNameValue.get(ColumnName);
				if (T.getIndexes().contains(ColumnName)) {
					String LHTPath = "data/tables/" + strTable + "/"
							+ "hashtable/" + ColumnName + ".bin";
					// LinearHashtable L = (LinearHashtable)
					// deserialize(LHTPath);
					LinearHashtable L = (LinearHashtable) loadFileDyn(LHTPath);
					String RecordPath = (String) L.get(ColumnValue);
					if (RecordPath != null) {
						// Page p = (Page) deserialize(RecordPath);
						Page p = (Page) loadFileDyn(RecordPath);
						Hashtable<String, String> r = p.getRecord(ColumnName,
								ColumnValue);
						if (!TakenRecords.contains(p.getPageName()
								+ p.getrecordPlace(r))) {// check if the record
															// isnt already
															// selected
							result.add(r);
							TakenRecords.add(r);
						}
					}

				} else {
					Iterator PagesI = T.getAllPages().iterator();
					while (PagesI.hasNext()) {
						String Pname = (String) PagesI.next();
						String PagePath = "data/tables/" + strTable + "/"
								+ "pages/" + Pname + ".class";
						// Page p = (Page) deserialize(PagePath);
						Page p = (Page) loadFileDyn(PagePath);
						Hashtable<String, String> r = p.getRecord(ColumnName,
								ColumnValue);
						ArrayList<Hashtable<String, String>> allRecordsInPage = p
								.getRecords();
						for (int i = 0; i < allRecordsInPage.size(); i++) {
							if (allRecordsInPage.get(i).get(ColumnName)
									.equals(ColumnValue)) {
								result.add(allRecordsInPage.get(i));
								System.out.println("while in OR works");
							}
						}
						/*
						 * if (r != null) if
						 * (!TakenRecords.contains(p.getPageName() +
						 * p.getrecordPlace(r))) {// check if the // record isnt
						 * // already // selected result.add(r);
						 * TakenRecords.add(r); }
						 */
					}
				}

			}
			for (int i = 0; i < result.size(); i++) {
				System.out.println(result.get(i));
			}
			return result.iterator();
		}
		if (strOperator.equals("AND")) {
			boolean flag = false;
			while (coloumnsI.hasNext()) {
				String ColumnName = (String) coloumnsI.next();
				String ColumnValue = htblColNameValue.get(ColumnName);
				if (flag == false) {
					if (T.getIndexes().contains(ColumnName)) {
						String LHTPath = "data/tables/" + strTable + "/"
								+ "hashtable/" + ColumnName + ".bin";
						// LinearHashtable L = (LinearHashtable)
						// deserialize(LHTPath);
						LinearHashtable L = (LinearHashtable) loadFileDyn(LHTPath);
						String RecordPath = (String) L.get(ColumnValue);
						if (RecordPath != null) {
							// Page p = (Page) deserialize(RecordPath);
							Page p = (Page) loadFileDyn(RecordPath);
							Hashtable<String, String> r = p.getRecord(
									ColumnName, ColumnValue);
							result.add(r);

						}

					} else {
						Iterator PagesI = T.getAllPages().iterator();
						while (PagesI.hasNext()) {
							String Pname = (String) PagesI.next();
							String PagePath = "data/tables/" + strTable + "/"
									+ "pages/" + Pname + ".class";
							// Page p = (Page) deserialize(PagePath);
							Page p = (Page) loadFileDyn(PagePath);
							Hashtable<String, String> r = p.getRecord(
									ColumnName, ColumnValue);
							ArrayList<Hashtable<String, String>> allRecordsInPage = p
									.getRecords();
							for (int i = 0; i < allRecordsInPage.size(); i++) {
								if (allRecordsInPage.get(i).get(ColumnName)
										.equals(ColumnValue)) {
									result.add(allRecordsInPage.get(i));
									System.out.println("while in OR works");
								}
							}
							/*
							 * if (r != null) result.add(r);
							 * 
							 * System.out.println(r.get("name"));
							 */

						}
					}

					flag = true;
				} else { // low flag mesh be false i.e. mesh 2wl iteration
							// 3lshan yeloop 3ala result mesh database 3lshan
							// AND kan nefse 23mlha recursion <3

					ArrayList temp = new ArrayList();
					temp = (ArrayList) result.clone();
					Iterator ResultI = temp.iterator();
					while (ResultI.hasNext()) {
						Hashtable<String, String> Record = (Hashtable<String, String>) ResultI
								.next();
						if (!Record.get(ColumnName).equals(ColumnValue))
							result.remove(Record);

					}
				}

			}
			for (int i = 0; i < result.size(); i++) {
				System.out.println(result.get(i));
			}

			return result.iterator();
		}
		return null;

	}